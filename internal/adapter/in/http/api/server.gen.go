// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthenticateRequest Authenticate
type AuthenticateRequest struct {
	Password string `json:"password" validate:"required,min=6,max=256"`
	Username string `json:"username" validate:"required,min=6,max=64,alphanum"`
}

// AuthenticateToken Authenticate
type AuthenticateToken struct {
	Token string `json:"token" validate:"required"`
}

// Error Default error response
type Error struct {
	Error string `json:"error"`
	Logid string `json:"logid"`
}

// MetricsGetResponse Metrics for Prometheus response
type MetricsGetResponse = string

// Organisation The model Organisation object
type Organisation struct {
	Admins      []string  `json:"admins"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description" validate:"required,min=1,max=256"`
	Enabled     bool      `json:"enabled"`
	Fqdn        string    `json:"fqdn"`
	Id          string    `json:"id,omitempty"`
	Name        string    `json:"name" validate:"required,min=6,max=64,alphanum"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// OrganisationIn Input to create the Organisation object
type OrganisationIn struct {
	Admins      []string `json:"admins"`
	Description string   `json:"description" validate:"required,min=1,max=256"`
	Enabled     bool     `json:"enabled"`
	Fqdn        string   `json:"fqdn" validate:"required,fqdn"`
	Name        string   `json:"name" validate:"required,min=6,max=64,alphanum"`
}

// Organisations Overview of all organisations
type Organisations = []Organisation

// UserIn Input to create the User object
type UserIn struct {
	Enabled  bool   `json:"enabled"`
	OrgId    string `json:"org_id" validate:"required"`
	Password string `json:"password" validate:"required,min=6,max=256"`
	Role     string `json:"role,omitempty" validate:"oneof=admin write readonly"`
	Username string `json:"username" validate:"required,min=6,max=64,alphanum"`
}

// UserNoPassword Return of the User object
type UserNoPassword struct {
	CreatedAt time.Time `json:"created_at"`
	Enabled   bool      `json:"enabled"`
	Id        string    `json:"id" validate:"required"`
	OrgId     string    `json:"org_id" validate:"required"`
	Role      string    `json:"role" validate:"oneof=admin write readonly"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username" validate:"required,min=6,max=64,alphanum"`
}

// GetAllOrganisationsParams defines parameters for GetAllOrganisations.
type GetAllOrganisationsParams struct {
	// Limit Size of the page, maximum is 100, default is 25
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Page The page to return
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// AuthenticateLoginJSONRequestBody defines body for AuthenticateLogin for application/json ContentType.
type AuthenticateLoginJSONRequestBody = AuthenticateRequest

// CreateOrganisationJSONRequestBody defines body for CreateOrganisation for application/json ContentType.
type CreateOrganisationJSONRequestBody = OrganisationIn

// UserCreateJSONRequestBody defines body for UserCreate for application/json ContentType.
type UserCreateJSONRequestBody = UserIn

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate
	// (POST /v1/auth/login)
	AuthenticateLogin(c *gin.Context)
	// Health
	// (GET /v1/health)
	GetHealth(c *gin.Context)
	// Metrics
	// (GET /v1/metrics)
	GetMetrics(c *gin.Context)
	// Returns all organisations
	// (GET /v1/organisations)
	GetAllOrganisations(c *gin.Context, params GetAllOrganisationsParams)
	// Create an organisation
	// (POST /v1/organisations)
	CreateOrganisation(c *gin.Context)
	// Create User Account
	// (POST /v1/users)
	UserCreate(c *gin.Context)
	// Get all users
	// (GET /v1/users/{userId})
	GetUserByID(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AuthenticateLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthenticateLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthenticateLogin(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMetrics(c)
}

// GetAllOrganisations operation middleware
func (siw *ServerInterfaceWrapper) GetAllOrganisations(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllOrganisationsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllOrganisations(c, params)
}

// CreateOrganisation operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganisation(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrganisation(c)
}

// UserCreate operation middleware
func (siw *ServerInterfaceWrapper) UserCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"admin", "write", "readonly"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserCreate(c)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"admin", "write", "readonly"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByID(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/auth/login", wrapper.AuthenticateLogin)
	router.GET(options.BaseURL+"/v1/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/v1/metrics", wrapper.GetMetrics)
	router.GET(options.BaseURL+"/v1/organisations", wrapper.GetAllOrganisations)
	router.POST(options.BaseURL+"/v1/organisations", wrapper.CreateOrganisation)
	router.POST(options.BaseURL+"/v1/users", wrapper.UserCreate)
	router.GET(options.BaseURL+"/v1/users/:userId", wrapper.GetUserByID)
}

type AuthenticateLoginRequestObject struct {
	Body *AuthenticateLoginJSONRequestBody
}

type AuthenticateLoginResponseObject interface {
	VisitAuthenticateLoginResponse(w http.ResponseWriter) error
}

type AuthenticateLogin200ResponseHeaders struct {
	XAPPLOGID string
}

type AuthenticateLogin200JSONResponse struct {
	Body    AuthenticateToken
	Headers AuthenticateLogin200ResponseHeaders
}

func (response AuthenticateLogin200JSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthenticateLogin403ResponseHeaders struct {
	XAPPLOGID string
}

type AuthenticateLogin403JSONResponse struct {
	Body    Error
	Headers AuthenticateLogin403ResponseHeaders
}

func (response AuthenticateLogin403JSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200ResponseHeaders struct {
	XAPPLOGID string
}

type GetHealth200JSONResponse struct {
	Body    MetricsGetResponse
	Headers GetHealth200ResponseHeaders
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealth503ResponseHeaders struct {
	XAPPLOGID string
}

type GetHealth503JSONResponse struct {
	Body    Error
	Headers GetHealth503ResponseHeaders
}

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(w http.ResponseWriter) error
}

type GetMetrics200Response struct {
}

func (response GetMetrics200Response) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetAllOrganisationsRequestObject struct {
	Params GetAllOrganisationsParams
}

type GetAllOrganisationsResponseObject interface {
	VisitGetAllOrganisationsResponse(w http.ResponseWriter) error
}

type GetAllOrganisations200ResponseHeaders struct {
	XAPPLOGID string
	XNEXT     string
	XPREVIOUS string
}

type GetAllOrganisations200JSONResponse struct {
	Body    Organisations
	Headers GetAllOrganisations200ResponseHeaders
}

func (response GetAllOrganisations200JSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.Header().Set("X-NEXT", fmt.Sprint(response.Headers.XNEXT))
	w.Header().Set("X-PREVIOUS", fmt.Sprint(response.Headers.XPREVIOUS))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisations403ResponseHeaders struct {
	XAPPLOGID string
}

type GetAllOrganisations403JSONResponse struct {
	Body    Error
	Headers GetAllOrganisations403ResponseHeaders
}

func (response GetAllOrganisations403JSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisationsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllOrganisationsdefaultJSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisationRequestObject struct {
	Body *CreateOrganisationJSONRequestBody
}

type CreateOrganisationResponseObject interface {
	VisitCreateOrganisationResponse(w http.ResponseWriter) error
}

type CreateOrganisation201ResponseHeaders struct {
	XAPPLOGID string
}

type CreateOrganisation201JSONResponse struct {
	Body    Organisation
	Headers CreateOrganisation201ResponseHeaders
}

func (response CreateOrganisation201JSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisation403ResponseHeaders struct {
	XAPPLOGID string
}

type CreateOrganisation403JSONResponse struct {
	Body    Error
	Headers CreateOrganisation403ResponseHeaders
}

func (response CreateOrganisation403JSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisation409ResponseHeaders struct {
	XAPPLOGID string
}

type CreateOrganisation409JSONResponse struct {
	Body    string
	Headers CreateOrganisation409ResponseHeaders
}

func (response CreateOrganisation409JSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisationdefaultResponseHeaders struct {
	XAPPLOGID string
}

type CreateOrganisationdefaultJSONResponse struct {
	Body       Error
	Headers    CreateOrganisationdefaultResponseHeaders
	StatusCode int
}

func (response CreateOrganisationdefaultJSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserCreateRequestObject struct {
	Body *UserCreateJSONRequestBody
}

type UserCreateResponseObject interface {
	VisitUserCreateResponse(w http.ResponseWriter) error
}

type UserCreate201ResponseHeaders struct {
	XAPPLOGID string
}

type UserCreate201JSONResponse struct {
	Body struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Enabled   *bool      `json:"enabled,omitempty"`
		Id        *string    `json:"id,omitempty"`
		OrgId     *string    `json:"org_id,omitempty"`
		Role      *string    `json:"role,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Username  *string    `json:"username,omitempty"`
	}
	Headers UserCreate201ResponseHeaders
}

func (response UserCreate201JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserCreate403ResponseHeaders struct {
	XAPPLOGID string
}

type UserCreate403JSONResponse struct {
	Body    Error
	Headers UserCreate403ResponseHeaders
}

func (response UserCreate403JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserCreate409ResponseHeaders struct {
	XAPPLOGID string
}

type UserCreate409JSONResponse struct {
	Body    Error
	Headers UserCreate409ResponseHeaders
}

func (response UserCreate409JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserByIDRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserByIDResponseObject interface {
	VisitGetUserByIDResponse(w http.ResponseWriter) error
}

type GetUserByID200ResponseHeaders struct {
	XAPPLOGID string
}

type GetUserByID200JSONResponse struct {
	Body    UserNoPassword
	Headers GetUserByID200ResponseHeaders
}

func (response GetUserByID200JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserByID403ResponseHeaders struct {
	XAPPLOGID string
}

type GetUserByID403JSONResponse struct {
	Body    Error
	Headers GetUserByID403ResponseHeaders
}

func (response GetUserByID403JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserByID404ResponseHeaders struct {
	XAPPLOGID string
}

type GetUserByID404JSONResponse struct {
	Body    Error
	Headers GetUserByID404ResponseHeaders
}

func (response GetUserByID404JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-APP-LOG-ID", fmt.Sprint(response.Headers.XAPPLOGID))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate
	// (POST /v1/auth/login)
	AuthenticateLogin(ctx context.Context, request AuthenticateLoginRequestObject) (AuthenticateLoginResponseObject, error)
	// Health
	// (GET /v1/health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Metrics
	// (GET /v1/metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Returns all organisations
	// (GET /v1/organisations)
	GetAllOrganisations(ctx context.Context, request GetAllOrganisationsRequestObject) (GetAllOrganisationsResponseObject, error)
	// Create an organisation
	// (POST /v1/organisations)
	CreateOrganisation(ctx context.Context, request CreateOrganisationRequestObject) (CreateOrganisationResponseObject, error)
	// Create User Account
	// (POST /v1/users)
	UserCreate(ctx context.Context, request UserCreateRequestObject) (UserCreateResponseObject, error)
	// Get all users
	// (GET /v1/users/{userId})
	GetUserByID(ctx context.Context, request GetUserByIDRequestObject) (GetUserByIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AuthenticateLogin operation middleware
func (sh *strictHandler) AuthenticateLogin(ctx *gin.Context) {
	var request AuthenticateLoginRequestObject

	var body AuthenticateLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthenticateLogin(ctx, request.(AuthenticateLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthenticateLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthenticateLoginResponseObject); ok {
		if err := validResponse.VisitAuthenticateLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx *gin.Context) {
	var request GetMetricsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx, request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllOrganisations operation middleware
func (sh *strictHandler) GetAllOrganisations(ctx *gin.Context, params GetAllOrganisationsParams) {
	var request GetAllOrganisationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllOrganisations(ctx, request.(GetAllOrganisationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllOrganisations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllOrganisationsResponseObject); ok {
		if err := validResponse.VisitGetAllOrganisationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrganisation operation middleware
func (sh *strictHandler) CreateOrganisation(ctx *gin.Context) {
	var request CreateOrganisationRequestObject

	var body CreateOrganisationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganisation(ctx, request.(CreateOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrganisationResponseObject); ok {
		if err := validResponse.VisitCreateOrganisationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserCreate operation middleware
func (sh *strictHandler) UserCreate(ctx *gin.Context) {
	var request UserCreateRequestObject

	var body UserCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCreate(ctx, request.(UserCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UserCreateResponseObject); ok {
		if err := validResponse.VisitUserCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByID operation middleware
func (sh *strictHandler) GetUserByID(ctx *gin.Context, userId string) {
	var request GetUserByIDRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByID(ctx, request.(GetUserByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserByIDResponseObject); ok {
		if err := validResponse.VisitGetUserByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"keBMi+x9wuzYbOa6Pl3/PwAA//87mh80xDgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
