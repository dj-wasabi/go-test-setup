// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate
	// (POST /auth/login)
	AuthenticateLogin(c *gin.Context)
	// Returns all organisations
	// (GET /organisations)
	GetAllOrganisations(c *gin.Context, params GetAllOrganisationsParams)
	// Create an organisation
	// (POST /organisations)
	CreateOrganisation(c *gin.Context)
	// Listing dummy stuff
	// (GET /test)
	ListTags(c *gin.Context)
	// Create User Account
	// (POST /user)
	UserCreate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AuthenticateLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthenticateLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthenticateLogin(c)
}

// GetAllOrganisations operation middleware
func (siw *ServerInterfaceWrapper) GetAllOrganisations(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllOrganisationsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllOrganisations(c, params)
}

// CreateOrganisation operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganisation(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrganisation(c)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTags(c)
}

// UserCreate operation middleware
func (siw *ServerInterfaceWrapper) UserCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserCreate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.AuthenticateLogin)
	router.GET(options.BaseURL+"/organisations", wrapper.GetAllOrganisations)
	router.POST(options.BaseURL+"/organisations", wrapper.CreateOrganisation)
	router.GET(options.BaseURL+"/test", wrapper.ListTags)
	router.POST(options.BaseURL+"/user", wrapper.UserCreate)
}

type AuthenticateLoginRequestObject struct {
	Body *AuthenticateLoginJSONRequestBody
}

type AuthenticateLoginResponseObject interface {
	VisitAuthenticateLoginResponse(w http.ResponseWriter) error
}

type AuthenticateLogin200JSONResponse string

func (response AuthenticateLogin200JSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateLogindefaultResponseHeaders struct {
	XCORRELATIONID string
}

type AuthenticateLogindefaultJSONResponse struct {
	Body       Error
	Headers    AuthenticateLogindefaultResponseHeaders
	StatusCode int
}

func (response AuthenticateLogindefaultJSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisationsRequestObject struct {
	Params GetAllOrganisationsParams
}

type GetAllOrganisationsResponseObject interface {
	VisitGetAllOrganisationsResponse(w http.ResponseWriter) error
}

type GetAllOrganisations200ResponseHeaders struct {
	XNEXT     string
	XPREVIOUS string
}

type GetAllOrganisations200JSONResponse struct {
	Body    GetAllOrganisations
	Headers GetAllOrganisations200ResponseHeaders
}

func (response GetAllOrganisations200JSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-NEXT", fmt.Sprint(response.Headers.XNEXT))
	w.Header().Set("X-PREVIOUS", fmt.Sprint(response.Headers.XPREVIOUS))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisationsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllOrganisationsdefaultJSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisationRequestObject struct {
	Body *CreateOrganisationJSONRequestBody
}

type CreateOrganisationResponseObject interface {
	VisitCreateOrganisationResponse(w http.ResponseWriter) error
}

type CreateOrganisation201ResponseHeaders struct {
	ContentLocation string
	XCORRELATIONID  string
	XOBJECTID       string
}

type CreateOrganisation201Response struct {
	Headers CreateOrganisation201ResponseHeaders
}

func (response CreateOrganisation201Response) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Location", fmt.Sprint(response.Headers.ContentLocation))
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.Header().Set("X-OBJECT-ID", fmt.Sprint(response.Headers.XOBJECTID))
	w.WriteHeader(201)
	return nil
}

type CreateOrganisationdefaultResponseHeaders struct {
	XCORRELATIONID string
}

type CreateOrganisationdefaultJSONResponse struct {
	Body       Error
	Headers    CreateOrganisationdefaultResponseHeaders
	StatusCode int
}

func (response CreateOrganisationdefaultJSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200ResponseHeaders struct {
	XCORRELATIONID string
}

type ListTags200JSONResponse struct {
	Body    Dummy
	Headers ListTags200ResponseHeaders
}

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsdefaultResponseHeaders struct {
	XCORRELATIONID string
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	Headers    ListTagsdefaultResponseHeaders
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserCreateRequestObject struct {
	Body *UserCreateJSONRequestBody
}

type UserCreateResponseObject interface {
	VisitUserCreateResponse(w http.ResponseWriter) error
}

type UserCreate201JSONResponse string

func (response UserCreate201JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UserCreate409JSONResponse string

func (response UserCreate409JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate
	// (POST /auth/login)
	AuthenticateLogin(ctx context.Context, request AuthenticateLoginRequestObject) (AuthenticateLoginResponseObject, error)
	// Returns all organisations
	// (GET /organisations)
	GetAllOrganisations(ctx context.Context, request GetAllOrganisationsRequestObject) (GetAllOrganisationsResponseObject, error)
	// Create an organisation
	// (POST /organisations)
	CreateOrganisation(ctx context.Context, request CreateOrganisationRequestObject) (CreateOrganisationResponseObject, error)
	// Listing dummy stuff
	// (GET /test)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Create User Account
	// (POST /user)
	UserCreate(ctx context.Context, request UserCreateRequestObject) (UserCreateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AuthenticateLogin operation middleware
func (sh *strictHandler) AuthenticateLogin(ctx *gin.Context) {
	var request AuthenticateLoginRequestObject

	var body AuthenticateLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthenticateLogin(ctx, request.(AuthenticateLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthenticateLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthenticateLoginResponseObject); ok {
		if err := validResponse.VisitAuthenticateLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllOrganisations operation middleware
func (sh *strictHandler) GetAllOrganisations(ctx *gin.Context, params GetAllOrganisationsParams) {
	var request GetAllOrganisationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllOrganisations(ctx, request.(GetAllOrganisationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllOrganisations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllOrganisationsResponseObject); ok {
		if err := validResponse.VisitGetAllOrganisationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrganisation operation middleware
func (sh *strictHandler) CreateOrganisation(ctx *gin.Context) {
	var request CreateOrganisationRequestObject

	var body CreateOrganisationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganisation(ctx, request.(CreateOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrganisationResponseObject); ok {
		if err := validResponse.VisitCreateOrganisationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(ctx *gin.Context) {
	var request ListTagsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserCreate operation middleware
func (sh *strictHandler) UserCreate(ctx *gin.Context) {
	var request UserCreateRequestObject

	var body UserCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCreate(ctx, request.(UserCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UserCreateResponseObject); ok {
		if err := validResponse.VisitUserCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eKcf0njz2amz+l2g/Gzz7wAAAP//IKtv+bgfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
