// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate
	// (POST /auth/login)
	AuthenticateLogin(c *gin.Context)
	// Returns all organisations
	// (GET /organisations)
	GetAllOrganisations(c *gin.Context, params GetAllOrganisationsParams)
	// Create an organisation
	// (POST /organisations)
	CreateOrganisation(c *gin.Context)
	// Listing dummy stuff
	// (GET /test)
	ListTags(c *gin.Context)
	// Create User Account
	// (POST /user)
	UserCreate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AuthenticateLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthenticateLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthenticateLogin(c)
}

// GetAllOrganisations operation middleware
func (siw *ServerInterfaceWrapper) GetAllOrganisations(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllOrganisationsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllOrganisations(c, params)
}

// CreateOrganisation operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganisation(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrganisation(c)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTags(c)
}

// UserCreate operation middleware
func (siw *ServerInterfaceWrapper) UserCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserCreate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.AuthenticateLogin)
	router.GET(options.BaseURL+"/organisations", wrapper.GetAllOrganisations)
	router.POST(options.BaseURL+"/organisations", wrapper.CreateOrganisation)
	router.GET(options.BaseURL+"/test", wrapper.ListTags)
	router.POST(options.BaseURL+"/user", wrapper.UserCreate)
}

type AuthenticateLoginRequestObject struct {
	Body *AuthenticateLoginJSONRequestBody
}

type AuthenticateLoginResponseObject interface {
	VisitAuthenticateLoginResponse(w http.ResponseWriter) error
}

type AuthenticateLogin200JSONResponse string

func (response AuthenticateLogin200JSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateLogindefaultResponseHeaders struct {
	XCORRELATIONID string
}

type AuthenticateLogindefaultJSONResponse struct {
	Body       Error
	Headers    AuthenticateLogindefaultResponseHeaders
	StatusCode int
}

func (response AuthenticateLogindefaultJSONResponse) VisitAuthenticateLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisationsRequestObject struct {
	Params GetAllOrganisationsParams
}

type GetAllOrganisationsResponseObject interface {
	VisitGetAllOrganisationsResponse(w http.ResponseWriter) error
}

type GetAllOrganisations200ResponseHeaders struct {
	XNEXT     string
	XPREVIOUS string
}

type GetAllOrganisations200JSONResponse struct {
	Body    GetAllOrganisations
	Headers GetAllOrganisations200ResponseHeaders
}

func (response GetAllOrganisations200JSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-NEXT", fmt.Sprint(response.Headers.XNEXT))
	w.Header().Set("X-PREVIOUS", fmt.Sprint(response.Headers.XPREVIOUS))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllOrganisationsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllOrganisationsdefaultJSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrganisationRequestObject struct {
	Body *CreateOrganisationJSONRequestBody
}

type CreateOrganisationResponseObject interface {
	VisitCreateOrganisationResponse(w http.ResponseWriter) error
}

type CreateOrganisation201ResponseHeaders struct {
	ContentLocation string
	XCORRELATIONID  string
	XOBJECTID       string
}

type CreateOrganisation201Response struct {
	Headers CreateOrganisation201ResponseHeaders
}

func (response CreateOrganisation201Response) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Location", fmt.Sprint(response.Headers.ContentLocation))
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.Header().Set("X-OBJECT-ID", fmt.Sprint(response.Headers.XOBJECTID))
	w.WriteHeader(201)
	return nil
}

type CreateOrganisationdefaultResponseHeaders struct {
	XCORRELATIONID string
}

type CreateOrganisationdefaultJSONResponse struct {
	Body       Error
	Headers    CreateOrganisationdefaultResponseHeaders
	StatusCode int
}

func (response CreateOrganisationdefaultJSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200ResponseHeaders struct {
	XCORRELATIONID string
}

type ListTags200JSONResponse struct {
	Body    Dummy
	Headers ListTags200ResponseHeaders
}

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsdefaultResponseHeaders struct {
	XCORRELATIONID string
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	Headers    ListTagsdefaultResponseHeaders
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-CORRELATION-ID", fmt.Sprint(response.Headers.XCORRELATIONID))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserCreateRequestObject struct {
	Body *UserCreateJSONRequestBody
}

type UserCreateResponseObject interface {
	VisitUserCreateResponse(w http.ResponseWriter) error
}

type UserCreate201JSONResponse string

func (response UserCreate201JSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UserCreatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserCreatedefaultJSONResponse) VisitUserCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate
	// (POST /auth/login)
	AuthenticateLogin(ctx context.Context, request AuthenticateLoginRequestObject) (AuthenticateLoginResponseObject, error)
	// Returns all organisations
	// (GET /organisations)
	GetAllOrganisations(ctx context.Context, request GetAllOrganisationsRequestObject) (GetAllOrganisationsResponseObject, error)
	// Create an organisation
	// (POST /organisations)
	CreateOrganisation(ctx context.Context, request CreateOrganisationRequestObject) (CreateOrganisationResponseObject, error)
	// Listing dummy stuff
	// (GET /test)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Create User Account
	// (POST /user)
	UserCreate(ctx context.Context, request UserCreateRequestObject) (UserCreateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AuthenticateLogin operation middleware
func (sh *strictHandler) AuthenticateLogin(ctx *gin.Context) {
	var request AuthenticateLoginRequestObject

	var body AuthenticateLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthenticateLogin(ctx, request.(AuthenticateLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthenticateLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthenticateLoginResponseObject); ok {
		if err := validResponse.VisitAuthenticateLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllOrganisations operation middleware
func (sh *strictHandler) GetAllOrganisations(ctx *gin.Context, params GetAllOrganisationsParams) {
	var request GetAllOrganisationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllOrganisations(ctx, request.(GetAllOrganisationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllOrganisations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllOrganisationsResponseObject); ok {
		if err := validResponse.VisitGetAllOrganisationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrganisation operation middleware
func (sh *strictHandler) CreateOrganisation(ctx *gin.Context) {
	var request CreateOrganisationRequestObject

	var body CreateOrganisationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganisation(ctx, request.(CreateOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrganisationResponseObject); ok {
		if err := validResponse.VisitCreateOrganisationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(ctx *gin.Context) {
	var request ListTagsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserCreate operation middleware
func (sh *strictHandler) UserCreate(ctx *gin.Context) {
	var request UserCreateRequestObject

	var body UserCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCreate(ctx, request.(UserCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UserCreateResponseObject); ok {
		if err := validResponse.VisitUserCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5iazQfk9x/Tx8rcAAAD//x8FQqtjHwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
