openapi: "3.0.0"
info:
  version: "1.0.0"
  title: Wernertie Dijkermannetjuhh
  description: Geen idee, nog over nadenken weet je?
  license:
    name: MIT
tags:
  - name: Organisation
  - name: Authentication
  - name: User
  - name: System
servers:
  - url: "http://localhost/v1"
paths:
  /v1/organisations:
    get:
      description: Returns all organisations
      summary: Returns all organisations
      operationId: GetAllOrganisations
      security:
        - BearerAuth: []
      tags:
        - Organisation
      parameters:
        - name: limit
          in: query
          description: Size of the page, maximum is 100, default is 25
          required: false
          schema:
            type: integer
            default: 25
            maximum: 100
            format: int32
            example: 25
        - name: page
          in: query
          description: The page to return
          required: false
          schema:
            type: integer
            maximum: 999999
            default: 1
            format: int32
            example: 100
      responses:
        "200":
          description: A paged overview of all organisations
          headers:
            X-NEXT:
              example: "http://localhost/api/v1/organisations?page=2&size=25"
              description: A link to the next page of responses
              schema:
                type: string
            X-PREVIOUS:
              example: "http://localhost/api/v1/organisations?page=1&size=25"
              description: A link to the previous page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationsGetResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create an organisation
      description: Create an organisation
      operationId: createOrganisation
      security:
        - BearerAuth: []
      tags:
        - Organisation
      requestBody:
        description: Organisation to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganisationPostRequest"
        required: true
      responses:
        "201":
          description: Successful creation of an organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationPostResponse"
        default:
          description: When create fails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/login:
    post:
      summary: Authenticate
      description: Authenticate so we can get a token and do stuff
      operationId: authenticateLogin
      tags:
        - Authentication
      requestBody:
        description: Authenticate
        content:
          application/json:
            example: { "username": "My Name", "password": "verySecret!"}
            schema:
              $ref: "#/components/schemas/AuthenticatePostRequest"
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              example:
                {
                  "token": "my.jwt.example"
                }
              schema:
                $ref: "#/components/schemas/AuthenticatePostResponse"
        "403":
          description: Unsuccesfull authentication attempt
          content:
            application/json:
              example:
                {
                  "message": "Invalid username/password combination"
                }
              schema:
                $ref: "#/components/schemas/AuthenticatePostResponseError"
  /v1/user:
    post:
      summary: Create User Account
      description: Create a User account
      operationId: userCreate
      security:
        - BearerAuth: []
      tags:
        - User
      requestBody:
        description: Create a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPostRequest"
        required: true
      responses:
        "201":
          description: Successfully created user
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPostResponse"
        "409":
          description: User already exist
          headers:
          content:
            application/json:
              example:
                {
                  "error": "duplicate account"
                }
              schema:
                type: string
                example: duplicate account
  /v1/health:
    get:
      summary: Health
      description: Returns the health of the application
      operationId: getHealth
      tags:
        - System
      responses:
        "200":
          description: Healty information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsGetResponse"
  /v1/metrics:
    get:
      summary: Metrics
      description: Returns all metrics
      operationId: getMetrics
      tags:
        - System
      responses:
        "200":
          description: Metrics for Prometheus
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    AuthenticatePostRequest:
      type: object
      description: Authenticate
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: username1
        password:
          type: string
          example: password
    AuthenticatePostResponse:
      type: object
      description: Authenticate
      required:
        - token
      properties:
        token:
          type: string
          example: my.authenticated.token
    AuthenticatePostResponseError:
      type: object
      description: Authenticate Error
      required:
        - message
      properties:
        message:
          type: string
          example: Invalid username/password combination
    OrganisationPostRequest:
      type: object
      description: Response of creating an organisation
      properties:
        name:
          type: string
          example: Name of the company
        description:
          type: string
          example: Description of the company
        enabled:
          type: boolean
          example: true
          default: false
        fqdn:
          type: string
          example: FQDN of the environment
        admins:
          type: array
          example: ["username1", "username2"]
    OrganisationPostResponse:
      type: object
      description: Response of creating an organisation
      properties:
        name:
          type: string
          example: Name of the company
        description:
          type: string
          example: Description of the company
        enabled:
          type: boolean
          example: true
          default: false
        created_at:
          type: string
          example: 2024-10-23 13:01:10
        updated_at:
          type: string
          example: 2024-10-23 13:01:11
        fqdn:
          type: string
          example: FQDN of the environment
        admins:
          type: array
          example: ["username1", "username2"]
    OrganisationsGetResponse:
      type: array
      maxItems: 100
      description: Overview of all organisations
      items:
        $ref: "#/components/schemas/OrganisationGetRespone"
    OrganisationGetRespone:
      description: Get an Organisation
      properties:
        id:
          type: string
          example: username1
        name:
          type: string
          example: password
        description:
          type: string
          example: password
        enabled:
          type: boolean
          example: false
        fqdn:
          type: string
          example: www.my.com/panys
        admins:
          type: array
          example: ["username1", "username2"]
    UserPostRequest:
      type: object
      description: Creating a user
      required:
        - organisation_id
        - username
        - password
      properties:
        organisation_id:
          type: string
          example: oid
        username:
          type: string
          example: username1
        password:
          type: string
          example: password
        enabled:
          type: boolean
          example: true
          default: false
        role:
          type: string
          example: admin
          default: ""
    UserPostResponse:
      type: object
      description: Response object user creation
      properties:
        id:
          type: string
          example: 871279gu1b2
        username:
          type: string
          example: username1
        enabled:
          type: boolean
          example: true
        created_at:
          type: string
          example: 2024-10-23 13:01:10
        updated_at:
          type: string
          example: 2024-10-23 13:01:11
        role:
          type: string
          example: admin
    MetricsGetResponse:
      description: Metrics for Prometheus response
      example: "Unknown"
      type: string
    Error:
      type: object
      description: Error response
      required:
        - message
      example:
        {
          "message": "An error occurred"
        }
      properties:
        message:
          type: string
          example: An error occurred
