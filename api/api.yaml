openapi: "3.0.3"
info:
  version: "1.0.0"
  title: Wernertie Dijkermannetjuhh
  description: Geen idee, nog over nadenken weet je?
  license:
    name: MIT
tags:
  - name: Organisation
    description: All Organisation related, only for 'admin' accounts
  - name: Authentication
    description: Authenticate so we can do other stuff
  - name: User
  - name: System
servers:
  - url: "http://localhost/v1"
paths:
  /v1/organisations:
    get:
      description: Returns all organisations
      summary: Returns all organisations
      operationId: GetAllOrganisations
      security:
        - BearerAuth: ["admin"]
      tags:
        - Organisation
      parameters:
        - name: limit
          in: query
          description: Size of the page, maximum is 100, default is 25
          required: false
          schema:
            type: integer
            default: 25
            maximum: 100
            format: int32
            example: 25
        - name: page
          in: query
          description: The page to return
          required: false
          schema:
            type: integer
            maximum: 999999
            default: 1
            format: int32
            example: 100
      responses:
        "200":
          description: A paged overview of all organisations
          headers:
            X-NEXT:
              example: "http://localhost/api/v1/organisations?page=2&size=25"
              description: A link to the next page of responses
              schema:
                type: string
            X-PREVIOUS:
              example: "http://localhost/api/v1/organisations?page=1&size=25"
              description: A link to the previous page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisations"
              example:
                organisations:
                  - id: 81i1h
                    name: mycompany
                    description: This is an amazing company
                    enabled: true
                    created_at: "2024-10-23 13:01:10"
                    updated_at: "2024-10-23 13:01:11"
                    fqdn: www.myhost.com
                    admins: [
                      "username1",
                      "username2"
                    ]
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/organisation:
    post:
      summary: Create an organisation
      description: Create an organisation
      operationId: createOrganisation
      security:
        - BearerAuth: ["admin"]
      tags:
        - Organisation
      requestBody:
        description: Organisation to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganisationIn"
        required: true
      responses:
        "201":
          description: Successful creation of an organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        default:
          description: When create fails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/login:
    post:
      summary: Authenticate
      description: Authenticate so we can get a token and do stuff
      operationId: authenticateLogin
      tags:
        - Authentication
      requestBody:
        description: Authenticate
        content:
          application/json:
            example:
              username: myUsername
              password: verySecret!
            schema:
              $ref: "#/components/schemas/AuthenticatePostRequest"
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              example:
                token: my.jwt.example
              schema:
                $ref: "#/components/schemas/AuthenticatePostResponse"
        "403":
          description: Unsuccesfull authentication attempt
          content:
            application/json:
              example:
                message: Invalid username/password combination
              schema:
                $ref: "#/components/schemas/Error"
  /v1/user:
    post:
      summary: Create User Account
      description: Create a User account
      operationId: userCreate
      security:
        - BearerAuth: ["admin", "write", "readonly"]
      tags:
        - User
      requestBody:
        description: Create a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIn"
        required: true
      responses:
        "201":
          description: Successfully created user
          content:
            application/json:
              example:
                org_id: 11jasygubh
                id: 871279gu1b2
                username: myusername
                enabled: true
                created_at: "2024-10-23 13:01:10"
                updated_at: "2024-10-23 13:01:11"
                role: admin
              schema:
                properties:
                  org_id:
                    type: string
                    example: oid
                  id:
                    type: string
                    example: 871279gu1b2
                  username:
                    type: string
                    example: username1
                  enabled:
                    type: boolean
                    example: true
                  created_at:
                    type: string
                    format: date-time
                    example: 2024-10-23 13:01:10
                  updated_at:
                    type: string
                    format: date-time
                    example: 2024-10-23 13:01:11
                  role:
                    type: string
                    example: admin
        "409":
          description: User already exist
          content:
            application/json:
              example:
                error: duplicate account
              schema:
                type: string
                example: duplicate account
  /v1/user/{user}:
    get:
      summary: Get all users
      description: Get all users but is a dummy for now
      operationId: getUserByID
      parameters:
        - in: path
          name: user
          schema:
            type: string
          required: true
          description: User ID
      security:
        - BearerAuth: ["admin", "write", "readonly"]
      tags:
        - User
      responses:
        "200":
          description: Get the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNoPassword"
        "404":
          description: User not exist
          content:
            application/json:
              example:
                error: user does not exist
              schema:
                type: string
                example: user does not exist
  /v1/health:
    get:
      summary: Health
      description: Returns the health of the application
      operationId: getHealth
      tags:
        - System
      responses:
        "200":
          description: Healty information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsGetResponse"
  /v1/metrics:
    get:
      summary: Metrics
      description: Returns all metrics
      operationId: getMetrics
      tags:
        - System
      responses:
        "200":
          description: Metrics for Prometheus
components:
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      type: http
      scheme: bearer
      flows:
        authorizationCode:
          scopes:
            admin: Admin access all organisations
            write: Be able to create or update resources in a organisation
            readonly: Read-only requests in a organisation
  schemas:
    AuthenticatePostRequest:
      type: object
      description: Authenticate
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: username1
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        password:
          type: string
          example: password
          format: password
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=256
    AuthenticatePostResponse:
      type: object
      description: Authenticate
      required:
        - token
      properties:
        token:
          type: string
          example: my.authenticated.token
          x-oapi-codegen-extra-tags:
            validate: required
    OrganisationIn:
      type: object
      description: Creating the Organisation object
      required:
        - name
        - description
        - enabled
        - fqdn
        - admins
      properties:
        name:
          type: string
          example: Name of the company
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        description:
          type: string
          example: Description of the company
          x-oapi-codegen-extra-tags:
            validate: required,min=1,max=256
        enabled:
          type: boolean
          example: true
          default: false
        fqdn:
          type: string
          example: FQDN of the environment
          x-oapi-codegen-extra-tags:
            validate: required,fqdn
        admins:
          type: array
          items:
            type: string
          example: ["username1", "username2"]
    Organisation:
      type: object
      description: Return of the Organisation object
      required:
        - id
        - name
        - description
        - enabled
        - created_at
        - updated_at
        - fqdn
        - admins
      properties:
        id:
          type: string
          example: id of the organisation
          x-oapi-codegen-extra-tags:
            validate: required
        name:
          type: string
          example: Name of the company
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        description:
          type: string
          example: Description of the company
          x-oapi-codegen-extra-tags:
            validate: required,min=1,max=256
        enabled:
          type: boolean
          example: true
          default: false
        created_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:10
        updated_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:11
        fqdn:
          type: string
          example: FQDN of the environment
        admins:
          type: array
          items:
            type: string
          example: ["username1", "username2"]
    Organisations:
      type: array
      maxItems: 100
      description: Overview of all organisations
      items:
        $ref: "#/components/schemas/Organisation"
    UserIn:
      type: object
      description: Object to create the User
      required:
        - org_id
        - username
        - password
        - enabled
        - role
      properties:
        org_id:
          type: string
          example: oid
          x-oapi-codegen-extra-tags:
            validate: required
        username:
          type: string
          example: username1
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        password:
          type: string
          example: password
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=256
        enabled:
          type: boolean
          example: true
          default: false
          x-omitempty: true
        role:
          type: string
          example: admin
          default: "readonly"
          x-omitempty: true
    User:
      type: object
      description: Return of the User object
      required:
        - org_id
        - id
        - username
        - password
        - enabled
        - created_at
        - updated_at
        - role
      properties:
        org_id:
          type: string
          example: oid
        id:
          type: string
          example: 871279gu1b2
        username:
          type: string
          example: username1
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        password:
          type: string
          example: password
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=256
        enabled:
          type: boolean
          example: true
          default: false
        created_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:10
        updated_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:11
        role:
          type: string
          example: admin
    UserNoPassword:
      type: object
      description: Return of the User object
      required:
        - org_id
        - id
        - username
        - enabled
        - created_at
        - updated_at
        - role
      properties:
        org_id:
          type: string
          example: oid
          x-oapi-codegen-extra-tags:
            validate: required
        id:
          type: string
          example: 871279gu1b2
          x-oapi-codegen-extra-tags:
            validate: required
        username:
          type: string
          example: username1
          x-oapi-codegen-extra-tags:
            validate: required,min=6,max=64,alphanum
        enabled:
          type: boolean
          example: true
          default: false
        created_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:10
        updated_at:
          type: string
          format: date-time
          example: 2024-10-23 13:01:11
        role:
          type: string
          example: admin
    MetricsGetResponse:
      description: Metrics for Prometheus response
      example: "Unknown"
      type: string
    Error:
      type: object
      description: Default error response
      required:
        - message
      example:
        message: An error occurred
      properties:
        message:
          type: string
          example: An error occurred
